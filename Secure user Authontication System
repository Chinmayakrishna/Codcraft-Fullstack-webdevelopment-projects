pip install Flask Flask-SQLAlchemy Flask-Bcrypt Flask-JWT-Extended Flask-Login
/secure-auth/
│
├── app.py
├── models.py
├── config.py
└── requirements.txt
import os

class Config:
    SECRET_KEY = os.urandom(24)
    SQLALCHEMY_DATABASE_URI = 'sqlite:///users.db'  # Use SQLite for simplicity
    SQLALCHEMY_TRACK_MODIFICATIONS = False
    JWT_SECRET_KEY = 'your_jwt_secret_key'  # Secret key for JWT
from flask_sqlalchemy import SQLAlchemy
from flask_bcrypt import Bcrypt

db = SQLAlchemy()
bcrypt = Bcrypt()

class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    email = db.Column(db.String(120), unique=True, nullable=False)
    password = db.Column(db.String(255), nullable=False)
    role = db.Column(db.String(20), default='user')  # Optional role

    def __repr__(self):
        return f'<User {self.email}>'

    def check_password(self, password):
        return bcrypt.check_password_hash(self.password, password)
from flask import Flask, request, jsonify
from flask_jwt_extended import JWTManager, create_access_token, jwt_required, get_jwt_identity
from models import db, bcrypt, User
from config import Config

app = Flask(__name__)
app.config.from_object(Config)

# Initialize Extensions
db.init_app(app)
bcrypt.init_app(app)
jwt = JWTManager(app)

# Routes

# Sign Up Route
@app.route('/signup', methods=['POST'])
def signup():
    data = request.get_json()
    email = data.get('email')
    password = data.get('password')

    # Check if user already exists
    user = User.query.filter_by(email=email).first()
    if user:
        return jsonify({'message': 'User already exists'}), 400

    # Hash the password
    hashed_password = bcrypt.generate_password_hash(password).decode('utf-8')

    # Create new user
    new_user = User(email=email, password=hashed_password)
    db.session.add(new_user)
    db.session.commit()

    return jsonify({'message': 'User created successfully'}), 201

# Login Route
@app.route('/login', methods=['POST'])
def login():
    data = request.get_json()
    email = data.get('email')
    password = data.get('password')

    # Check if user exists
    user = User.query.filter_by(email=email).first()
    if not user or not user.check_password(password):
        return jsonify({'message': 'Invalid credentials'}), 401

    # Create JWT token
    access_token = create_access_token(identity={'email': user.email, 'role': user.role})
    return jsonify({'access_token': access_token})

# Protected Route (Only accessible with JWT)
@app.route('/protected', methods=['GET'])
@jwt_required()
def protected():
    current_user = get_jwt_identity()
    return jsonify({'message': f'Welcome {current_user["email"]}'}), 200

# Role-based Protected Route (Admin only)
@app.route('/admin', methods=['GET'])
@jwt_required()
def admin():
    current_user = get_jwt_identity()
    if current_user["role"] != "admin":
        return jsonify({"message": "Permission denied"}), 403
    return jsonify({"message": "Admin content"}), 200

# Run the application
if __name__ == '__main__':
    with app.app_context():
        db.create_all()  # Create database tables
    app.run(debug=True)
#Testing the Application:
curl -X POST http://127.0.0.1:5000/signup -H "Content-Type: application/json" -d '{"email": "test@example.com", "password": "mypassword"}'
curl -X POST http://127.0.0.1:5000/login -H "Content-Type: application/json" -d '{"email": "test@example.com", "password": "mypassword"}'
curl -X GET http://127.0.0.1:5000/protected -H "Authorization: Bearer <your_jwt_token>"
